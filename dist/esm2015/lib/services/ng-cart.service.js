import { Injectable } from '@angular/core';
import { BehaviorSubject, throwError, of } from 'rxjs';
import { tap, filter } from 'rxjs/operators';
import { NgGqlService } from '../ng-gql.service';
import { EventerService } from './eventer.service';
import * as i0 from "@angular/core";
import * as i1 from "../ng-gql.service";
import * as i2 from "./eventer.service";
const LS_NAME = 'cartId';
export class NgCartService {
    constructor(ngGqlService, eventer) {
        this.ngGqlService = ngGqlService;
        this.eventer = eventer;
        this.OrderFormChange = new BehaviorSubject(null);
        this.cart = new BehaviorSubject({});
        this.initialStorage();
        this.modifiers$ = new BehaviorSubject([]);
        this.modifiersMessage$ = new BehaviorSubject([]);
        this.modifiersMessage$.subscribe(messages => this.messages = messages);
    }
    getCartId() {
        return localStorage.getItem(LS_NAME);
    }
    setCartId(cartId) {
        if (!cartId)
            return null;
        localStorage.setItem(LS_NAME, cartId);
    }
    removeCartId() {
        localStorage.removeItem(LS_NAME);
    }
    userCart$() {
        return this.cart.pipe(filter(cart => !!cart));
    }
    setModifiers(modifiers, messages) {
        this.modifiers$.next(modifiers);
        if (messages)
            this.modifiersMessage$.next(messages);
    }
    getModifiers() {
        return this.modifiers$;
    }
    initialStorage() {
        this.cartId = this.getCartId();
        this.ngGqlService
            .getCart$(this.cartId)
            .pipe(tap(cart => {
            console.log('cart tap', cart);
            if ((cart === null || cart === void 0 ? void 0 : cart.state) == 'ORDER') {
                throwError(new Error('Cart in order state'));
            }
            this.setCartId(cart === null || cart === void 0 ? void 0 : cart.id);
        }))
            .subscribe(cart => this.cart.next(cart), error => this.removeCartId());
    }
    addDishToCart$(data) {
        if (this.messages.length) {
            this.messages.forEach(message => {
                this.eventer.emitMessageEvent(message);
            });
        }
        return this.ngGqlService.addDishToCart$(data);
    }
    removeDishFromCart$(dishId, amount) {
        return this.ngGqlService.removeDishFromCart$({
            cartDishId: dishId,
            cartId: this.cartId,
            amount
        });
    }
    orderCart$(data) {
        return this.ngGqlService.orderCart$(data);
    }
    checkCart$(data) {
        console.log('Check cart$', data);
        return this.ngGqlService.checkCart$(data);
    }
    setDishCountToCart(dishId, amount) {
        console.log('setDishCountToCart');
    }
    setDishComment(dishId, comment) {
        console.log('setDishComment');
        return of(null);
    }
}
NgCartService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgCartService_Factory() { return new NgCartService(i0.ɵɵinject(i1.NgGqlService), i0.ɵɵinject(i2.EventerService)); }, token: NgCartService, providedIn: "root" });
NgCartService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
NgCartService.ctorParameters = () => [
    { type: NgGqlService },
    { type: EventerService }
];
//# sourceMappingURL=data:application/json;base64,
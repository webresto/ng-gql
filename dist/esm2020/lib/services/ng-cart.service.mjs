import { Injectable } from '@angular/core';
import { BehaviorSubject, of } from 'rxjs';
import { tap, filter, map, catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../ng-gql.service";
import * as i2 from "./eventer.service";
const LS_NAME = 'cartId';
export class NgCartService {
    constructor(ngGqlService, eventer) {
        this.ngGqlService = ngGqlService;
        this.eventer = eventer;
        this.cart = new BehaviorSubject(null);
        this.modifiers$ = new BehaviorSubject([]);
        this.modifiersMessage$ = new BehaviorSubject([]);
        this.messages = [];
        this.OrderFormChange = new BehaviorSubject(null);
        this.initialStorage();
        this.modifiersMessage$.subscribe(messages => this.messages = messages);
    }
    ;
    getCartId() {
        return localStorage.getItem(LS_NAME) ?? undefined;
    }
    setCartId(cartId) {
        if (cartId) {
            localStorage.setItem(LS_NAME, cartId);
        }
    }
    removeCartId() {
        localStorage.removeItem(LS_NAME);
    }
    userCart$() {
        return this.cart.pipe(filter(cart => !!cart));
    }
    setModifiers(modifiers, messages) {
        this.modifiers$.next(modifiers);
        if (messages)
            this.modifiersMessage$.next(messages);
    }
    getModifiers() {
        return this.modifiers$;
    }
    initialStorage() {
        this.cartId = this.getCartId();
        this.cartSubscription?.unsubscribe();
        this.cartSubscription = this.ngGqlService
            .getCart$(this.cartId)
            .pipe(tap(cart => {
            console.log('cart tap', cart);
            if (cart?.state == 'ORDER') {
                throw new Error('Cart in order state');
            }
            this.setCartId(cart.id);
        }))
            .subscribe(cart => this.cart.next(cart), error => this.removeCartId());
    }
    addDishToCart$(data) {
        if (this.messages.length) {
            this.messages.forEach(message => {
                this.eventer.emitMessageEvent(message);
            });
        }
        return this.ngGqlService.addDishToCart$(data);
    }
    removeDishFromCart$(dishId, amount) {
        return this.ngGqlService.removeDishFromCart$({
            cartDishId: dishId,
            cartId: this.cartId,
            amount
        });
    }
    orderCart$(data) {
        return this.ngGqlService.orderCart$(data);
    }
    paymentLink$(phone, fromPhone) {
        console.log('paymentLink', this.cartId, phone, fromPhone);
        //return of(null);
        return this.ngGqlService.customMutation$('paymentLink', {
            paymentLink: 1
        }, {
            cartId: this.cartId,
            phone,
            fromPhone
        })
            .pipe(map(data => data.data), catchError(error => {
            console.log('error', error);
            this.eventer.emitMessageEvent({
                type: 'info',
                title: 'Не удалось отправить ссылку для оплаты.',
                body: error.message
            });
            return of(null);
        }));
    }
    checkCart$(data) {
        console.log('Check cart$', data);
        return this.ngGqlService.checkCart$(data);
    }
    setDishCountToCart$(dishId, amount) {
        return this.ngGqlService.setDishAmount$({
            cartDishId: dishId,
            cartId: this.cartId,
            amount
        });
    }
    setDishComment$(dishId, comment) {
        return this.ngGqlService.setDishComment$({
            cartDishId: dishId,
            cartId: this.cartId,
            comment
        });
    }
}
NgCartService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: NgCartService, deps: [{ token: i1.NgGqlService }, { token: i2.EventerService }], target: i0.ɵɵFactoryTarget.Injectable });
NgCartService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: NgCartService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.2", ngImport: i0, type: NgCartService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.NgGqlService }, { type: i2.EventerService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctY2FydC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvd2VicmVzdG8vbmctZ3FsL3NyYy9saWIvc2VydmljZXMvbmctY2FydC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQzFELE9BQU8sRUFBRSxlQUFlLEVBQUUsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQUs5RCxNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUM7QUFLekIsTUFBTSxPQUFPLGFBQWE7SUFVeEIsWUFDVSxZQUEwQixFQUMxQixPQUF1QjtRQUR2QixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQixZQUFPLEdBQVAsT0FBTyxDQUFnQjtRQVZqQyxTQUFJLEdBQWlDLElBQUksZUFBZSxDQUFjLElBQUksQ0FBQyxDQUFDO1FBRTVFLGVBQVUsR0FBRyxJQUFJLGVBQWUsQ0FBc0IsRUFBRSxDQUFDLENBQUM7UUFDMUQsc0JBQWlCLEdBQW9DLElBQUksZUFBZSxDQUFpQixFQUFFLENBQUMsQ0FBQztRQUM3RixhQUFRLEdBQW1CLEVBQUUsQ0FBQztRQUM5QixvQkFBZSxHQUFHLElBQUksZUFBZSxDQUFzQixJQUFJLENBQUMsQ0FBQztRQU8vRCxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdEIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLENBQUM7SUFDekUsQ0FBQztJQWQyRSxDQUFDO0lBZ0I3RSxTQUFTO1FBQ1AsT0FBTyxZQUFZLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLFNBQVMsQ0FB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YSxjQUZaLE1BQU07MkZBRVAsYUFBYTtrQkFIekIsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgdHlwZSB7IE9ic2VydmFibGUsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFwLCBmaWx0ZXIsIG1hcCwgY2F0Y2hFcnJvciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB0eXBlIHsgRXZlbnRNZXNzYWdlLCBPcmRlckNhcnRJbnB1dCwgQ2hlY2tSZXNwb25zZSwgQ2FydCwgQWRkVG9DYXJ0SW5wdXQsIE1vZGlmaWVyIH0gZnJvbSAnLi4vbW9kZWxzJztcbmltcG9ydCB7IE5nR3FsU2VydmljZSB9IGZyb20gJy4uL25nLWdxbC5zZXJ2aWNlJztcbmltcG9ydCB7IEV2ZW50ZXJTZXJ2aWNlIH0gZnJvbSAnLi9ldmVudGVyLnNlcnZpY2UnO1xuXG5jb25zdCBMU19OQU1FID0gJ2NhcnRJZCc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE5nQ2FydFNlcnZpY2Uge1xuICBjYXJ0SWQ6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgY2FydDogQmVoYXZpb3JTdWJqZWN0PENhcnQgfCBudWxsPiA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Q2FydCB8IG51bGw+KG51bGwpOztcblxuICBtb2RpZmllcnMkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxQYXJ0aWFsPE1vZGlmaWVyW10+PihbXSk7XG4gIG1vZGlmaWVyc01lc3NhZ2UkOiBCZWhhdmlvclN1YmplY3Q8RXZlbnRNZXNzYWdlW10+ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxFdmVudE1lc3NhZ2VbXT4oW10pO1xuICBtZXNzYWdlczogRXZlbnRNZXNzYWdlW10gPSBbXTtcbiAgT3JkZXJGb3JtQ2hhbmdlID0gbmV3IEJlaGF2aW9yU3ViamVjdDxTaW1wbGVDaGFuZ2VzIHxudWxsPihudWxsKTtcbiAgY2FydFN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uIHwgdW5kZWZpbmVkO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgbmdHcWxTZXJ2aWNlOiBOZ0dxbFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBldmVudGVyOiBFdmVudGVyU2VydmljZVxuICApIHtcbiAgICB0aGlzLmluaXRpYWxTdG9yYWdlKCk7XG4gICAgdGhpcy5tb2RpZmllcnNNZXNzYWdlJC5zdWJzY3JpYmUobWVzc2FnZXMgPT4gdGhpcy5tZXNzYWdlcyA9IG1lc3NhZ2VzKTtcbiAgfVxuXG4gIGdldENhcnRJZCgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShMU19OQU1FKSA/PyB1bmRlZmluZWQ7XG4gIH1cblxuICBzZXRDYXJ0SWQoY2FydElkOiBzdHJpbmcpIHtcbiAgICBpZiAoY2FydElkKSB7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShMU19OQU1FLCBjYXJ0SWQpO1xuICAgIH1cbiAgfVxuXG4gIHJlbW92ZUNhcnRJZCgpIHtcbiAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShMU19OQU1FKTtcbiAgfVxuXG4gIHVzZXJDYXJ0JCgpOiBCZWhhdmlvclN1YmplY3Q8YW55PiB8IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuY2FydC5waXBlKGZpbHRlcihjYXJ0ID0+ICEhY2FydCkpO1xuICB9XG5cbiAgc2V0TW9kaWZpZXJzKG1vZGlmaWVyczogTW9kaWZpZXJbXSwgbWVzc2FnZXM/OiBFdmVudE1lc3NhZ2VbXSk6IHZvaWQge1xuICAgIHRoaXMubW9kaWZpZXJzJC5uZXh0KG1vZGlmaWVycyk7XG4gICAgaWYgKG1lc3NhZ2VzKSB0aGlzLm1vZGlmaWVyc01lc3NhZ2UkLm5leHQobWVzc2FnZXMpO1xuICB9XG5cbiAgZ2V0TW9kaWZpZXJzKCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMubW9kaWZpZXJzJDtcbiAgfVxuXG4gIGluaXRpYWxTdG9yYWdlKCkge1xuICAgIHRoaXMuY2FydElkID0gdGhpcy5nZXRDYXJ0SWQoKTtcbiAgICB0aGlzLmNhcnRTdWJzY3JpcHRpb24/LnVuc3Vic2NyaWJlKCk7XG4gICAgdGhpcy5jYXJ0U3Vic2NyaXB0aW9uID0gdGhpcy5uZ0dxbFNlcnZpY2VcbiAgICAgIC5nZXRDYXJ0JCh0aGlzLmNhcnRJZClcbiAgICAgIC5waXBlKFxuICAgICAgICB0YXAoY2FydCA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ2NhcnQgdGFwJywgY2FydCk7XG4gICAgICAgICAgaWYgKGNhcnQ/LnN0YXRlID09ICdPUkRFUicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2FydCBpbiBvcmRlciBzdGF0ZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnNldENhcnRJZChjYXJ0LmlkKTtcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICAgIC5zdWJzY3JpYmUoXG4gICAgICAgIGNhcnQgPT4gdGhpcy5jYXJ0Lm5leHQoY2FydCksXG4gICAgICAgIGVycm9yID0+IHRoaXMucmVtb3ZlQ2FydElkKClcbiAgICAgICk7XG4gIH1cblxuICBhZGREaXNoVG9DYXJ0JChkYXRhOiBBZGRUb0NhcnRJbnB1dCkge1xuICAgIGlmICh0aGlzLm1lc3NhZ2VzLmxlbmd0aCkge1xuICAgICAgdGhpcy5tZXNzYWdlcy5mb3JFYWNoKG1lc3NhZ2UgPT4ge1xuICAgICAgICB0aGlzLmV2ZW50ZXIuZW1pdE1lc3NhZ2VFdmVudChtZXNzYWdlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5uZ0dxbFNlcnZpY2UuYWRkRGlzaFRvQ2FydCQoZGF0YSk7XG4gIH1cblxuICByZW1vdmVEaXNoRnJvbUNhcnQkKGRpc2hJZDogbnVtYmVyLCBhbW91bnQ6IG51bWJlcikge1xuICAgIHJldHVybiB0aGlzLm5nR3FsU2VydmljZS5yZW1vdmVEaXNoRnJvbUNhcnQkKHtcbiAgICAgIGNhcnREaXNoSWQ6IGRpc2hJZCxcbiAgICAgIGNhcnRJZDogdGhpcy5jYXJ0SWQsXG4gICAgICBhbW91bnRcbiAgICB9KTtcbiAgfVxuXG5cbiAgb3JkZXJDYXJ0JChkYXRhOiBPcmRlckNhcnRJbnB1dCk6IE9ic2VydmFibGU8Q2hlY2tSZXNwb25zZT4ge1xuICAgIHJldHVybiB0aGlzLm5nR3FsU2VydmljZS5vcmRlckNhcnQkKGRhdGEpO1xuICB9XG5cbiAgcGF5bWVudExpbmskKHBob25lOiBzdHJpbmcsIGZyb21QaG9uZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBjb25zb2xlLmxvZygncGF5bWVudExpbmsnLCB0aGlzLmNhcnRJZCwgcGhvbmUsIGZyb21QaG9uZSk7XG4gICAgLy9yZXR1cm4gb2YobnVsbCk7XG4gICAgcmV0dXJuIHRoaXMubmdHcWxTZXJ2aWNlLmN1c3RvbU11dGF0aW9uJCgncGF5bWVudExpbmsnLCB7XG4gICAgICBwYXltZW50TGluazogMVxuICAgIH0sIHtcbiAgICAgIGNhcnRJZDogdGhpcy5jYXJ0SWQsXG4gICAgICBwaG9uZSxcbiAgICAgIGZyb21QaG9uZVxuICAgIH0pXG4gICAgICAucGlwZShcbiAgICAgICAgbWFwKGRhdGEgPT4gZGF0YS5kYXRhKSxcbiAgICAgICAgY2F0Y2hFcnJvcihlcnJvciA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgICAgIHRoaXMuZXZlbnRlci5lbWl0TWVzc2FnZUV2ZW50KHtcbiAgICAgICAgICAgIHR5cGU6ICdpbmZvJyxcbiAgICAgICAgICAgIHRpdGxlOiAn0J3QtSDRg9C00LDQu9C+0YHRjCDQvtGC0L/RgNCw0LLQuNGC0Ywg0YHRgdGL0LvQutGDINC00LvRjyDQvtC/0LvQsNGC0YsuJyxcbiAgICAgICAgICAgIGJvZHk6IGVycm9yLm1lc3NhZ2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gb2YobnVsbCk7XG4gICAgICAgIH0pXG4gICAgICApXG4gIH1cblxuICBjaGVja0NhcnQkKGRhdGE6IE9yZGVyQ2FydElucHV0KTogT2JzZXJ2YWJsZTxDaGVja1Jlc3BvbnNlPiB7XG4gICAgY29uc29sZS5sb2coJ0NoZWNrIGNhcnQkJywgZGF0YSk7XG4gICAgcmV0dXJuIHRoaXMubmdHcWxTZXJ2aWNlLmNoZWNrQ2FydCQoZGF0YSk7XG4gIH1cblxuICBzZXREaXNoQ291bnRUb0NhcnQkKGRpc2hJZDogbnVtYmVyLCBhbW91bnQ6IG51bWJlcikge1xuICAgIHJldHVybiB0aGlzLm5nR3FsU2VydmljZS5zZXREaXNoQW1vdW50JCh7XG4gICAgICBjYXJ0RGlzaElkOiBkaXNoSWQsXG4gICAgICBjYXJ0SWQ6IHRoaXMuY2FydElkLFxuICAgICAgYW1vdW50XG4gICAgfSk7XG4gIH1cblxuICBzZXREaXNoQ29tbWVudCQoZGlzaElkOiBudW1iZXIsIGNvbW1lbnQ6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLm5nR3FsU2VydmljZS5zZXREaXNoQ29tbWVudCQoe1xuICAgICAgY2FydERpc2hJZDogZGlzaElkLFxuICAgICAgY2FydElkOiB0aGlzLmNhcnRJZCxcbiAgICAgIGNvbW1lbnRcbiAgICB9KTtcbiAgfVxufVxuIl19
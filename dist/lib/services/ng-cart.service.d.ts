import { SimpleChanges } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import type { Observable, Subscription } from 'rxjs';
import type { EventMessage, OrderCartInput, CheckResponse, Cart, AddToCartInput, Modifier } from '../models';
import { NgGqlService } from '../ng-gql.service';
import { EventerService } from './eventer.service';
import * as i0 from "@angular/core";
export declare class NgCartService {
    private ngGqlService;
    private eventer;
    cartId: string | undefined;
    cart: BehaviorSubject<Cart | null>;
    modifiers$: BehaviorSubject<(Modifier | undefined)[]>;
    modifiersMessage$: BehaviorSubject<EventMessage[]>;
    messages: EventMessage[];
    OrderFormChange: BehaviorSubject<SimpleChanges | null>;
    cartSubscription: Subscription | undefined;
    constructor(ngGqlService: NgGqlService, eventer: EventerService);
    getCartId(): string | undefined;
    setCartId(cartId: string): void;
    removeCartId(): void;
    userCart$(): BehaviorSubject<any> | Observable<any>;
    setModifiers(modifiers: Modifier[], messages?: EventMessage[]): void;
    getModifiers(): Observable<any>;
    initialStorage(): void;
    addDishToCart$(data: AddToCartInput): Observable<Cart>;
    removeDishFromCart$(dishId: number, amount: number): Observable<Cart>;
    orderCart$(data: OrderCartInput): Observable<CheckResponse>;
    paymentLink$(phone: string, fromPhone: string): Observable<any>;
    checkCart$(data: OrderCartInput): Observable<CheckResponse>;
    setDishCountToCart$(dishId: number, amount: number): Observable<Cart>;
    setDishComment$(dishId: number, comment: string): Observable<Cart>;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgCartService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<NgCartService>;
}

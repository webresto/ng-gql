import { EventEmitter } from '@angular/core';
import type { SimpleChanges } from '@angular/core';
import type { PaymentMethod } from '../models';
import { NgCartService } from '../services/ng-cart.service';
import * as i0 from "@angular/core";
export declare class CheckoutDirective {
    private cartService;
    cartTotal: any;
    bonuses: any;
    name: string | undefined;
    email: string | undefined;
    phone: string | undefined;
    phonePaymentSmsCode: string | undefined;
    delivery: any;
    selfService: any;
    locationId: string | undefined;
    street: string | undefined;
    streetId: string | undefined;
    home: string | undefined;
    housing: string | undefined;
    apartment: string | undefined;
    entrance: string | undefined;
    doorphone: string | undefined;
    floor: string | undefined;
    paymentMethod: PaymentMethod | undefined;
    paymentMethodId: string | undefined;
    personsCount: number;
    comment: string | undefined;
    callback: string | undefined;
    date: string | undefined;
    notifyMethodId: string | undefined;
    success: EventEmitter<boolean>;
    paymentRedirect: EventEmitter<string>;
    error: EventEmitter<string>;
    isChecking: EventEmitter<boolean>;
    cart: any;
    lastFormChangeKey: string | undefined;
    constructor(cartService: NgCartService);
    onClick(): void;
    ngOnChanges(changes: SimpleChanges): void;
    checkStreet(): void;
    preparePhone(phone: string | undefined): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<CheckoutDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<CheckoutDirective, "[checkout]", never, { "cartTotal": "cartTotal"; "bonuses": "bonuses"; "name": "name"; "email": "email"; "phone": "phone"; "phonePaymentSmsCode": "phonePaymentSmsCode"; "delivery": "delivery"; "selfService": "selfService"; "locationId": "locationId"; "street": "street"; "streetId": "streetId"; "home": "home"; "housing": "housing"; "apartment": "apartment"; "entrance": "entrance"; "doorphone": "doorphone"; "floor": "floor"; "paymentMethod": "paymentMethod"; "paymentMethodId": "paymentMethodId"; "personsCount": "personsCount"; "comment": "comment"; "callback": "callback"; "date": "date"; "notifyMethodId": "notifyMethodId"; }, { "success": "success"; "paymentRedirect": "paymentRedirect"; "error": "error"; "isChecking": "isChecking"; }, never>;
}
